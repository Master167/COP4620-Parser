-----	Follow	-----
program:	$ 
declaration-list:	 
declaration-list-prime:	 
declaration:	INT FLOAT VOID 
call-declaration:	 
id-specifier:	INT FLOAT VOID 
type-specifier:	ID 
params:	) 
param-list:	 
param-list-prime:	 
param:	, 
array:	, 
compound-stmt:	 
local-declarations:	ID ( NUM ; { IF WHILE RETURN 
local-declaration-prime:	 
statement-list:	} 
statement-list-prime:	 
statement:	ID ( NUM ; { IF WHILE RETURN ELSE 
expression-stmt:	 
selection-stmt:	 
dangling-else:	 
iteration-stmt:	 
return-stmt:	 
return-stmt-end:	 
expression:	; ) ] ,
variable:	 
variable-factor:	 
var-array:	= ( ID NUM + - <= < > >= == != 
relop-expression:	 
relop:	( ID NUM 
additive-expression:	 
additive-expression-prime:	<= < > >= == != 
addop:	( ID NUM 
term:	+ - * / 
term-prime:	<= < > >= == != + - 
mulop:	( ID NUM 
var-call:	+ - ( ID NUM 
args:	) 
arg-list:	 
arg-list-prime:	 

// Ok you've done the First in Follows