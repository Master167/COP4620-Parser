/**
NOTE: For use here, all non-terminals lower case
*/

program 			-> 	declaration-list
declaration-list	->	declaration-list declaration | declaration							// Left-Recursion
declaration			->	var-declaration | fun-declaration
var-declaration		-> 	type-specifier ID id-specifier
id-specifier		->	; | [ NUM ] ;
type-specifier		->	INT | FLOAT | VOID
fun-declaration		->	type-specifier ID ( params ) compound-stmt
params				->	param-list | VOID
param-list			->	param-list , param | param											// Left-Recursion
param				->	type-specifier ID array
array				->	[ ] | empty
compound-stmt		->	{ local-declarations statement-list }
local-declarations	->	local-declarations var-declaration | empty							// Left-Recursion
statement-list		->	statement-list statement | empty									// Left-Recursion
statement			->	expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt		->	expression ; | ;
selection-stmt		->	IF ( expression ) statement | IF ( expression ) statement ELSE statement
iteration-stmt		->	WHILE ( expression ) statement
return-stmt			->	RETURN ; | RETURN expression ;
expression			->	var = expression | simple-expression
var					->	ID | ID [ expression ]
simple-expression	->	additive-expression relop-expression
relop-expression	->	relop additive-expression | empty
relop				->	<= | < | > | >= | == | !=
additive-expression ->	additive-expression addop term | term 								// Left-Recursion
addop				->	+ | -
term				->	term mulop factor | factor 											// Left-Recursion
mulop				->	* | /
factor				->	( expression ) | var | call | NUM
call				->	ID ( args )
args				->	arg-list | empty
arg-list			->	arg-list , expression | expression									// Left-Recursion