/**
NOTE: For use here, all non-terminals lower case

Left-Recursion Fix:
A	-> Aa | b		=>	A	-> bA'
						A'	-> aA' | empty
*/

program 					->	declaration-list
declaration-list			->	declaration declaration-list-prime
declaration-list-prime		->	declaration declaration-list-prime | empty
declaration					->	type-specifier ID
call-declaration			->	id-specifier | ( params ) compound-stmt
id-specifier				->	; | [ NUM ] ;
type-specifier				->	INT | FLOAT | VOID
params						->	param-list | VOID
param-list					->	param param-list-prime
param-list-prime			->	, param param-list-prime | empty
param						->	type-specifier ID array
array						->	[ ] | empty
compound-stmt				->	{ local-declarations statement-list }
local-declarations			->	local-declaration-prime
local-declaration-prime		->	type-specifier ID id-specifier local-declaration-prime | empty
statement-list				->	statement-list-prime
statement-list-prime		->	statement statement-list-prime | empty
statement					->	expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt				->	expression ; | ;
selection-stmt				->	IF ( expression ) statement | IF ( expression ) statement ELSE statement
iteration-stmt				->	WHILE ( expression ) statement
return-stmt					->	RETURN ; | RETURN expression ;
expression					->	var = expression | simple-expression
var							->	ID | ID [ expression ]
simple-expression			->	additive-expression relop-expression
relop-expression			->	relop additive-expression | empty
relop						->	<= | < | > | >= | == | !=
additive-expression 		->	term additive-expression-prime
additive-expression-prime	->	addop term additive-expression-prime | empty
addop						->	+ | -
term						->	factor term-prime
term-prime					->	term mulop term-prime | empty
mulop						->	* | /
factor						->	( expression ) | var | call | NUM
call						->	ID ( args )
args						->	arg-list | empty
arg-list					->	expression arg-list-prime
arg-list-prime				->	, expression arg-list-prime | empty